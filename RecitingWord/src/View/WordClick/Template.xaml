<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
					xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
					xmlns:M="clr-namespace:RecitingWord"
					
					xmlns:local="clr-namespace:RecitingWord.View">
	
	<SolidColorBrush x:Key="MainBackground" Color="#FF1E1E1E"/>
	<SolidColorBrush x:Key="MainForeground" Color="#FFE6E6E6"/>
	<SolidColorBrush x:Key="MainSelectedBackground" Color="#FF0A0A0A"/>

	<DataTemplate DataType="{x:Type local:Passage}">
		<ItemsControl ItemsSource="{Binding Words}">
			<ItemsControl.ItemsPanel>
				<ItemsPanelTemplate>
					<WrapPanel/>
				</ItemsPanelTemplate>
			</ItemsControl.ItemsPanel>
		</ItemsControl>
	</DataTemplate>
	
	<DataTemplate  DataType="{x:Type M:WordMode}">
		<Button  x:Name="b" ToolTip="{Binding ToolTip}"
			Command="{Binding Command}" CommandParameter="{Binding ElementName=b}"
			BorderBrush="Transparent" Focusable="True" 
			Foreground="{StaticResource MainForeground}"
			FontFamily="宋体"  
			FontSize="{Binding Source={x:Static M:SettingViewMode.Instance},Path=WordClickFontSize}" 
			HorizontalAlignment="Center" VerticalAlignment="Center" >
			
			
			<!--BorderBrush="{x:Null}"-->
			<!--MouseLeftButtonUp="" MouseLeftButtonDown=""-->
			<!--TouchMove="{Binding MouseLeftButtonDown}" TouchUp="{Binding MouseLeftButtonDown}"-->
			<!--<Button.InputBindings>
				<MouseBinding MouseAction="LeftClick" Command="{Binding }"/>
				<MouseBinding MouseAction="LeftClick"/>
			</Button.InputBindings>-->
			
			<Button.Content>
				<TextBlock Margin="0 5" Text="{Binding Word}" Background="{x:Null}" />
			</Button.Content>
			<Button.Template>
				<ControlTemplate TargetType="Button">
					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted" Value="True">
							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>-->
							<Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<!--<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>-->
							<Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
						</Trigger>
						<Trigger Property="ToggleButton.IsChecked" Value="True">
							<!--<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>-->
							<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
							<Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
							<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Button.Template>
			<i:Interaction.Triggers>
				<i:EventTrigger EventName="TouchUp">
					<i:InvokeCommandAction Command="{Binding TouchUp}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>
				<i:EventTrigger EventName="TouchDown">
					<i:InvokeCommandAction Command="{Binding TouchDown}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>
				<i:EventTrigger EventName="TouchMove">
					<i:InvokeCommandAction Command="{Binding TouchMove}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>
				<i:EventTrigger EventName="PreviewMouseLeftButtonDown">
					<i:InvokeCommandAction Command="{Binding PreviewMouseLeftButtonDown}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>
				<i:EventTrigger EventName="PreviewMouseLeftButtonUp">
					<i:InvokeCommandAction Command="{Binding PreviewMouseLeftButtonUp}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>
				<!--<i:EventTrigger EventName="MouseMove">
					<i:InvokeCommandAction Command="{Binding MouseMove}" CommandParameter="{Binding  ElementName=b}"/>
				</i:EventTrigger>-->
			</i:Interaction.Triggers>
		</Button>
	</DataTemplate>

	<Style TargetType="TabItem">
		<Style.Triggers>
			<Trigger Property="TabItem.IsSelected" Value="True">
				<Setter Property="TabItem.Template" >
					<Setter.Value>
						<ControlTemplate>
							<TextBlock TextAlignment="Center" 
									   Background="{StaticResource MainSelectedBackground}" 
									   Foreground="{StaticResource MainForeground}" 
									   Text="{TemplateBinding HeaderedContentControl.Header}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="TabItem.IsSelected" Value="False">
				<Setter Property="TabItem.Template" >
					<Setter.Value>
						<ControlTemplate>
							<TextBlock	TextAlignment="Center"
										Background="{StaticResource MainBackground}"
										Foreground="{StaticResource MainForeground}" 
										Text="{TemplateBinding HeaderedContentControl.Header}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="DataGridTextColumn" BasedOn="{StaticResource {x:Type DataGridTextColumn}}">
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
	</Style>
	<Style TargetType="DataGridRowHeader" BasedOn="{StaticResource {x:Type DataGridRowHeader}}">
		<Setter Property="Foreground" Value="{StaticResource MainForeground}"/>
		<Setter Property="Background" Value="{StaticResource MainBackground}"/>
	</Style>
	
</ResourceDictionary>